trigger:
  - none  # No automatic trigger

resources:
  pipelines:
    - pipeline: ci-social-media-aks-application  # This is the alias that references the source pipeline
      source: "ci-social-media-aks-application"  # This is the actual name of the pipeline
      trigger:
        branches:
          include:
            - main  # Trigger the pipeline when there is a successful run in the main branch

pool:
  vmImage: 'ubuntu-latest'  # Using Ubuntu as the agent for the pipeline

stages:
  -  stage: Deploy
     jobs:
       -  job: deploy_aks
          steps:
          - task: DownloadBuildArtifacts@1
            inputs:
              buildType: 'specific'  # Download artifacts from a specific pipeline
              project: '$(System.TeamProject)'  # Using the current project
              pipeline: 'ci-social-media-aks-application'  # Alias to refer to the source pipeline
              runVersion: 'latest'  # Download the latest successful run of the pipeline
              downloadPath: '$(System.ArtifactsDirectory)'  # Directory to download the artifacts
              artifactName: 'drop'  # Artifact name to download

          # ‚õìÔ∏è Set AKS context
          - task: AzureCLI@2
            displayName: 'üîê Set AKS context'
            inputs:
              azureSubscription: '<Your Azure Service Connection Name>'  # Replace with your service connection
              scriptType: bash
              scriptLocation: inlineScript
              inlineScript: |
                az aks get-credentials \
                  --resource-group <your-aks-resource-group> \
                  --name <your-aks-cluster-name> \
                  --overwrite-existing

          # üì¶ Apply Kubernetes manifests
          - task: Kubernetes@1
            displayName: 'üöÄ Deploy Kubernetes Manifests'
            inputs:
              connectionType: 'Azure Resource Manager'
              azureSubscription: '<Your Azure Service Connection Name>'  # Same as above
              azureResourceGroup: '<your-aks-resource-group>'
              kubernetesCluster: '<your-aks-cluster-name>'
              command: apply
              useConfigurationFile: true
              configuration: '$(System.ArtifactsDirectory)/drop/deployment.yaml'  # adjust path if needed
